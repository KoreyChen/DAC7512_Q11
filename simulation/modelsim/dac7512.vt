// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/25/2017 16:06:10"
                                                                                
// Verilog Test Bench template for design : dac7512
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns

module dac7512_vlg_tst();

parameter clk_set = 20 ;

// constants                                           
// general purpose registers
reg clk;
reg [11:0] data;
reg rst_n;
// wires                                               
wire din;
wire sclk;
wire sync;

// assign statements (if any)                          
dac7512 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data(data),
	.din(din),
	.rst_n(rst_n),
	.sclk(sclk),
	.sync(sync)
);
initial                                                
begin                                                  
	clk = 0;
	rst_n = 0;
	data = 12'd1000;
	#200
	rst_n = 1;
end                                                    
always                                                 					
begin                                                  
	clk = #(clk_set) ~clk;										
end                                                    
endmodule

